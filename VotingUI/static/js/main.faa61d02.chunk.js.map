{"version":3,"sources":["ChaosApiClient.ts","appConfig.ts","WebSocketManager.ts","features/room/roomSlice.ts","features/room/VoteButton.tsx","features/room/Room.tsx","features/room/Lobby.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["ChaosApiClient","baseUrl","http","jsonParseReviver","undefined","this","window","roomCode","roomPassword","url_","Error","encodeURIComponent","replace","fetch","method","headers","then","_response","processCreateGame","response","status","_headers","forEach","v","k","text","_responseText","throwException","Promise","resolve","body","options_","JSON","stringify","processUpdateVoteOptionsForRoom","processCloseGame","processHostVoteOptionsTemplate","resultData200","parse","HostVoteOptions","fromJS","round","optionId","processVote","processGetCompleteGameState","CompleteGameState","processGetPartialGameState","PartialGameState","data","previousResultDescription","currentRound","voteOptionsState","property","hasOwnProperty","_data","Array","isArray","item","push","FullVoteOptionState","toJSON","result","init","id","count","description","HostVoteOption","chaosId","voteOptions","partialVoteStates","PartialVoteState","ApiException","message","isApiException","obj","settings","apiUrl","webApiServer","hubUrl","ChaosApi","initialState","gameState","gameVotesState","roomSlice","createSlice","name","reducers","updateCompleteGameState","state","action","payload","updatePartialGameState","newGameVoteState","map","gvs","matchingVoteUpdate","find","vu","castVote","a","vote","console","log","VoteButton","btnColour","className","onClick","Room","useParams","useSelector","room","left","right","length","i","dispatch","useDispatch","handleNewVoteOptions","completeGameState","vos","actions","updateCompleteGameStateFromSocketUpdate","handleVoteUpdate","partialGameState","voteUpdate","pvs","updatePartialGameStateFromSocketUpdate","useEffect","WebSocketManager","setupConnection","getCompleteGameState","catch","error","loadInitialGameState","gameVoteState","Lobby","history","useHistory","useState","setRoomCode","type","aria-label","aria-describedby","value","onChange","evt","target","connection","registerAsVoter","send","newVoteOptions","signalR","withUrl","build","on","start","err","App","friendValues","Math","floor","random","friendText","to","path","store","configureStore","reducer","roomReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.faa61d02.chunk.js","sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\n//----------------------\r\n// <auto-generated>\r\n//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)\r\n// </auto-generated>\r\n//----------------------\r\n// ReSharper disable InconsistentNaming\r\n\r\nexport class ChaosApiClient {\r\n    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };\r\n    private baseUrl: string;\r\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\r\n\r\n    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {\r\n        this.http = http ? http : <any>window;\r\n        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : \"\";\r\n    }\r\n\r\n    /**\r\n     * @param roomCode (optional) \r\n     * @param roomPassword (optional) \r\n     * @return Success\r\n     */\r\n    createGame(roomCode: string | undefined, roomPassword: string | undefined): Promise<void> {\r\n        let url_ = this.baseUrl + \"/Hosting/CreateGame?\";\r\n        if (roomCode === null)\r\n            throw new Error(\"The parameter 'roomCode' cannot be null.\");\r\n        else if (roomCode !== undefined)\r\n            url_ += \"roomCode=\" + encodeURIComponent(\"\" + roomCode) + \"&\";\r\n        if (roomPassword === null)\r\n            throw new Error(\"The parameter 'roomPassword' cannot be null.\");\r\n        else if (roomPassword !== undefined)\r\n            url_ += \"roomPassword=\" + encodeURIComponent(\"\" + roomPassword) + \"&\";\r\n        url_ = url_.replace(/[?&]$/, \"\");\r\n\r\n        let options_ = <RequestInit>{\r\n            method: \"POST\",\r\n            headers: {\r\n            }\r\n        };\r\n\r\n        return this.http.fetch(url_, options_).then((_response: Response) => {\r\n            return this.processCreateGame(_response);\r\n        });\r\n    }\r\n\r\n    protected processCreateGame(response: Response): Promise<void> {\r\n        const status = response.status;\r\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\r\n        if (status === 200) {\r\n            return response.text().then((_responseText) => {\r\n            return;\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\r\n            });\r\n        }\r\n        return Promise.resolve<void>(<any>null);\r\n    }\r\n\r\n    /**\r\n     * @param body (optional) \r\n     * @return Success\r\n     */\r\n    updateVoteOptionsForRoom(body: HostVoteOptions | undefined): Promise<void> {\r\n        let url_ = this.baseUrl + \"/Hosting/UpdateVoteOptionsForRoom\";\r\n        url_ = url_.replace(/[?&]$/, \"\");\r\n\r\n        const content_ = JSON.stringify(body);\r\n\r\n        let options_ = <RequestInit>{\r\n            body: content_,\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            }\r\n        };\r\n\r\n        return this.http.fetch(url_, options_).then((_response: Response) => {\r\n            return this.processUpdateVoteOptionsForRoom(_response);\r\n        });\r\n    }\r\n\r\n    protected processUpdateVoteOptionsForRoom(response: Response): Promise<void> {\r\n        const status = response.status;\r\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\r\n        if (status === 200) {\r\n            return response.text().then((_responseText) => {\r\n            return;\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\r\n            });\r\n        }\r\n        return Promise.resolve<void>(<any>null);\r\n    }\r\n\r\n    /**\r\n     * @param roomPassword (optional) \r\n     * @param roomCode (optional) \r\n     * @return Success\r\n     */\r\n    closeGame(roomPassword: string | undefined, roomCode: string | undefined): Promise<void> {\r\n        let url_ = this.baseUrl + \"/Hosting/CloseGame?\";\r\n        if (roomPassword === null)\r\n            throw new Error(\"The parameter 'roomPassword' cannot be null.\");\r\n        else if (roomPassword !== undefined)\r\n            url_ += \"roomPassword=\" + encodeURIComponent(\"\" + roomPassword) + \"&\";\r\n        if (roomCode === null)\r\n            throw new Error(\"The parameter 'roomCode' cannot be null.\");\r\n        else if (roomCode !== undefined)\r\n            url_ += \"roomCode=\" + encodeURIComponent(\"\" + roomCode) + \"&\";\r\n        url_ = url_.replace(/[?&]$/, \"\");\r\n\r\n        let options_ = <RequestInit>{\r\n            method: \"DELETE\",\r\n            headers: {\r\n            }\r\n        };\r\n\r\n        return this.http.fetch(url_, options_).then((_response: Response) => {\r\n            return this.processCloseGame(_response);\r\n        });\r\n    }\r\n\r\n    protected processCloseGame(response: Response): Promise<void> {\r\n        const status = response.status;\r\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\r\n        if (status === 200) {\r\n            return response.text().then((_responseText) => {\r\n            return;\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\r\n            });\r\n        }\r\n        return Promise.resolve<void>(<any>null);\r\n    }\r\n\r\n    /**\r\n     * @return Success\r\n     */\r\n    hostVoteOptionsTemplate(): Promise<HostVoteOptions> {\r\n        let url_ = this.baseUrl + \"/Template/HostVoteOptionsTemplate\";\r\n        url_ = url_.replace(/[?&]$/, \"\");\r\n\r\n        let options_ = <RequestInit>{\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Accept\": \"text/plain\"\r\n            }\r\n        };\r\n\r\n        return this.http.fetch(url_, options_).then((_response: Response) => {\r\n            return this.processHostVoteOptionsTemplate(_response);\r\n        });\r\n    }\r\n\r\n    protected processHostVoteOptionsTemplate(response: Response): Promise<HostVoteOptions> {\r\n        const status = response.status;\r\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\r\n        if (status === 200) {\r\n            return response.text().then((_responseText) => {\r\n            let result200: any = null;\r\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\r\n            result200 = HostVoteOptions.fromJS(resultData200);\r\n            return result200;\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\r\n            });\r\n        }\r\n        return Promise.resolve<HostVoteOptions>(<any>null);\r\n    }\r\n\r\n    /**\r\n     * @param roomCode (optional) \r\n     * @param round (optional) \r\n     * @param optionId (optional) \r\n     * @return Success\r\n     */\r\n    vote(roomCode: string | undefined, round: number | undefined, optionId: number | undefined): Promise<void> {\r\n        let url_ = this.baseUrl + \"/Voting/Vote?\";\r\n        if (roomCode === null)\r\n            throw new Error(\"The parameter 'roomCode' cannot be null.\");\r\n        else if (roomCode !== undefined)\r\n            url_ += \"roomCode=\" + encodeURIComponent(\"\" + roomCode) + \"&\";\r\n        if (round === null)\r\n            throw new Error(\"The parameter 'round' cannot be null.\");\r\n        else if (round !== undefined)\r\n            url_ += \"round=\" + encodeURIComponent(\"\" + round) + \"&\";\r\n        if (optionId === null)\r\n            throw new Error(\"The parameter 'optionId' cannot be null.\");\r\n        else if (optionId !== undefined)\r\n            url_ += \"optionId=\" + encodeURIComponent(\"\" + optionId) + \"&\";\r\n        url_ = url_.replace(/[?&]$/, \"\");\r\n\r\n        let options_ = <RequestInit>{\r\n            method: \"POST\",\r\n            headers: {\r\n            }\r\n        };\r\n\r\n        return this.http.fetch(url_, options_).then((_response: Response) => {\r\n            return this.processVote(_response);\r\n        });\r\n    }\r\n\r\n    protected processVote(response: Response): Promise<void> {\r\n        const status = response.status;\r\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\r\n        if (status === 200) {\r\n            return response.text().then((_responseText) => {\r\n            return;\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\r\n            });\r\n        }\r\n        return Promise.resolve<void>(<any>null);\r\n    }\r\n\r\n    /**\r\n     * @param roomCode (optional) \r\n     * @return Success\r\n     */\r\n    getCompleteGameState(roomCode: string | undefined): Promise<CompleteGameState> {\r\n        let url_ = this.baseUrl + \"/Voting/GetCompleteGameState?\";\r\n        if (roomCode === null)\r\n            throw new Error(\"The parameter 'roomCode' cannot be null.\");\r\n        else if (roomCode !== undefined)\r\n            url_ += \"roomCode=\" + encodeURIComponent(\"\" + roomCode) + \"&\";\r\n        url_ = url_.replace(/[?&]$/, \"\");\r\n\r\n        let options_ = <RequestInit>{\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Accept\": \"text/plain\"\r\n            }\r\n        };\r\n\r\n        return this.http.fetch(url_, options_).then((_response: Response) => {\r\n            return this.processGetCompleteGameState(_response);\r\n        });\r\n    }\r\n\r\n    protected processGetCompleteGameState(response: Response): Promise<CompleteGameState> {\r\n        const status = response.status;\r\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\r\n        if (status === 200) {\r\n            return response.text().then((_responseText) => {\r\n            let result200: any = null;\r\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\r\n            result200 = CompleteGameState.fromJS(resultData200);\r\n            return result200;\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\r\n            });\r\n        }\r\n        return Promise.resolve<CompleteGameState>(<any>null);\r\n    }\r\n\r\n    /**\r\n     * @param roomCode (optional) \r\n     * @return Success\r\n     */\r\n    getPartialGameState(roomCode: string | undefined): Promise<PartialGameState> {\r\n        let url_ = this.baseUrl + \"/Voting/GetPartialGameState?\";\r\n        if (roomCode === null)\r\n            throw new Error(\"The parameter 'roomCode' cannot be null.\");\r\n        else if (roomCode !== undefined)\r\n            url_ += \"roomCode=\" + encodeURIComponent(\"\" + roomCode) + \"&\";\r\n        url_ = url_.replace(/[?&]$/, \"\");\r\n\r\n        let options_ = <RequestInit>{\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Accept\": \"text/plain\"\r\n            }\r\n        };\r\n\r\n        return this.http.fetch(url_, options_).then((_response: Response) => {\r\n            return this.processGetPartialGameState(_response);\r\n        });\r\n    }\r\n\r\n    protected processGetPartialGameState(response: Response): Promise<PartialGameState> {\r\n        const status = response.status;\r\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\r\n        if (status === 200) {\r\n            return response.text().then((_responseText) => {\r\n            let result200: any = null;\r\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\r\n            result200 = PartialGameState.fromJS(resultData200);\r\n            return result200;\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\r\n            });\r\n        }\r\n        return Promise.resolve<PartialGameState>(<any>null);\r\n    }\r\n}\r\n\r\nexport class CompleteGameState implements ICompleteGameState {\r\n    previousResultDescription?: string | undefined;\r\n    currentRound?: number;\r\n    voteOptionsState?: FullVoteOptionState[] | undefined;\r\n\r\n    constructor(data?: ICompleteGameState) {\r\n        if (data) {\r\n            for (var property in data) {\r\n                if (data.hasOwnProperty(property))\r\n                    (<any>this)[property] = (<any>data)[property];\r\n            }\r\n        }\r\n    }\r\n\r\n    init(_data?: any) {\r\n        if (_data) {\r\n            this.previousResultDescription = _data[\"previousResultDescription\"];\r\n            this.currentRound = _data[\"currentRound\"];\r\n            if (Array.isArray(_data[\"voteOptionsState\"])) {\r\n                this.voteOptionsState = [] as any;\r\n                for (let item of _data[\"voteOptionsState\"])\r\n                    this.voteOptionsState!.push(FullVoteOptionState.fromJS(item));\r\n            }\r\n        }\r\n    }\r\n\r\n    static fromJS(data: any): CompleteGameState {\r\n        data = typeof data === 'object' ? data : {};\r\n        let result = new CompleteGameState();\r\n        result.init(data);\r\n        return result;\r\n    }\r\n\r\n    toJSON(data?: any) {\r\n        data = typeof data === 'object' ? data : {};\r\n        data[\"previousResultDescription\"] = this.previousResultDescription;\r\n        data[\"currentRound\"] = this.currentRound;\r\n        if (Array.isArray(this.voteOptionsState)) {\r\n            data[\"voteOptionsState\"] = [];\r\n            for (let item of this.voteOptionsState)\r\n                data[\"voteOptionsState\"].push(item.toJSON());\r\n        }\r\n        return data; \r\n    }\r\n}\r\n\r\nexport interface ICompleteGameState {\r\n    previousResultDescription?: string | undefined;\r\n    currentRound?: number;\r\n    voteOptionsState?: FullVoteOptionState[] | undefined;\r\n}\r\n\r\nexport class FullVoteOptionState implements IFullVoteOptionState {\r\n    id?: number;\r\n    count?: number;\r\n    description?: string | undefined;\r\n\r\n    constructor(data?: IFullVoteOptionState) {\r\n        if (data) {\r\n            for (var property in data) {\r\n                if (data.hasOwnProperty(property))\r\n                    (<any>this)[property] = (<any>data)[property];\r\n            }\r\n        }\r\n    }\r\n\r\n    init(_data?: any) {\r\n        if (_data) {\r\n            this.id = _data[\"id\"];\r\n            this.count = _data[\"count\"];\r\n            this.description = _data[\"description\"];\r\n        }\r\n    }\r\n\r\n    static fromJS(data: any): FullVoteOptionState {\r\n        data = typeof data === 'object' ? data : {};\r\n        let result = new FullVoteOptionState();\r\n        result.init(data);\r\n        return result;\r\n    }\r\n\r\n    toJSON(data?: any) {\r\n        data = typeof data === 'object' ? data : {};\r\n        data[\"id\"] = this.id;\r\n        data[\"count\"] = this.count;\r\n        data[\"description\"] = this.description;\r\n        return data; \r\n    }\r\n}\r\n\r\nexport interface IFullVoteOptionState {\r\n    id?: number;\r\n    count?: number;\r\n    description?: string | undefined;\r\n}\r\n\r\nexport class HostVoteOption implements IHostVoteOption {\r\n    chaosId?: string | undefined;\r\n    description?: string | undefined;\r\n\r\n    constructor(data?: IHostVoteOption) {\r\n        if (data) {\r\n            for (var property in data) {\r\n                if (data.hasOwnProperty(property))\r\n                    (<any>this)[property] = (<any>data)[property];\r\n            }\r\n        }\r\n    }\r\n\r\n    init(_data?: any) {\r\n        if (_data) {\r\n            this.chaosId = _data[\"chaosId\"];\r\n            this.description = _data[\"description\"];\r\n        }\r\n    }\r\n\r\n    static fromJS(data: any): HostVoteOption {\r\n        data = typeof data === 'object' ? data : {};\r\n        let result = new HostVoteOption();\r\n        result.init(data);\r\n        return result;\r\n    }\r\n\r\n    toJSON(data?: any) {\r\n        data = typeof data === 'object' ? data : {};\r\n        data[\"chaosId\"] = this.chaosId;\r\n        data[\"description\"] = this.description;\r\n        return data; \r\n    }\r\n}\r\n\r\nexport interface IHostVoteOption {\r\n    chaosId?: string | undefined;\r\n    description?: string | undefined;\r\n}\r\n\r\nexport class HostVoteOptions implements IHostVoteOptions {\r\n    roomCode?: string | undefined;\r\n    voteOptions?: HostVoteOption[] | undefined;\r\n\r\n    constructor(data?: IHostVoteOptions) {\r\n        if (data) {\r\n            for (var property in data) {\r\n                if (data.hasOwnProperty(property))\r\n                    (<any>this)[property] = (<any>data)[property];\r\n            }\r\n        }\r\n    }\r\n\r\n    init(_data?: any) {\r\n        if (_data) {\r\n            this.roomCode = _data[\"roomCode\"];\r\n            if (Array.isArray(_data[\"voteOptions\"])) {\r\n                this.voteOptions = [] as any;\r\n                for (let item of _data[\"voteOptions\"])\r\n                    this.voteOptions!.push(HostVoteOption.fromJS(item));\r\n            }\r\n        }\r\n    }\r\n\r\n    static fromJS(data: any): HostVoteOptions {\r\n        data = typeof data === 'object' ? data : {};\r\n        let result = new HostVoteOptions();\r\n        result.init(data);\r\n        return result;\r\n    }\r\n\r\n    toJSON(data?: any) {\r\n        data = typeof data === 'object' ? data : {};\r\n        data[\"roomCode\"] = this.roomCode;\r\n        if (Array.isArray(this.voteOptions)) {\r\n            data[\"voteOptions\"] = [];\r\n            for (let item of this.voteOptions)\r\n                data[\"voteOptions\"].push(item.toJSON());\r\n        }\r\n        return data; \r\n    }\r\n}\r\n\r\nexport interface IHostVoteOptions {\r\n    roomCode?: string | undefined;\r\n    voteOptions?: HostVoteOption[] | undefined;\r\n}\r\n\r\nexport class PartialGameState implements IPartialGameState {\r\n    partialVoteStates?: PartialVoteState[] | undefined;\r\n\r\n    constructor(data?: IPartialGameState) {\r\n        if (data) {\r\n            for (var property in data) {\r\n                if (data.hasOwnProperty(property))\r\n                    (<any>this)[property] = (<any>data)[property];\r\n            }\r\n        }\r\n    }\r\n\r\n    init(_data?: any) {\r\n        if (_data) {\r\n            if (Array.isArray(_data[\"partialVoteStates\"])) {\r\n                this.partialVoteStates = [] as any;\r\n                for (let item of _data[\"partialVoteStates\"])\r\n                    this.partialVoteStates!.push(PartialVoteState.fromJS(item));\r\n            }\r\n        }\r\n    }\r\n\r\n    static fromJS(data: any): PartialGameState {\r\n        data = typeof data === 'object' ? data : {};\r\n        let result = new PartialGameState();\r\n        result.init(data);\r\n        return result;\r\n    }\r\n\r\n    toJSON(data?: any) {\r\n        data = typeof data === 'object' ? data : {};\r\n        if (Array.isArray(this.partialVoteStates)) {\r\n            data[\"partialVoteStates\"] = [];\r\n            for (let item of this.partialVoteStates)\r\n                data[\"partialVoteStates\"].push(item.toJSON());\r\n        }\r\n        return data; \r\n    }\r\n}\r\n\r\nexport interface IPartialGameState {\r\n    partialVoteStates?: PartialVoteState[] | undefined;\r\n}\r\n\r\nexport class PartialVoteState implements IPartialVoteState {\r\n    id?: number;\r\n    count?: number;\r\n\r\n    constructor(data?: IPartialVoteState) {\r\n        if (data) {\r\n            for (var property in data) {\r\n                if (data.hasOwnProperty(property))\r\n                    (<any>this)[property] = (<any>data)[property];\r\n            }\r\n        }\r\n    }\r\n\r\n    init(_data?: any) {\r\n        if (_data) {\r\n            this.id = _data[\"id\"];\r\n            this.count = _data[\"count\"];\r\n        }\r\n    }\r\n\r\n    static fromJS(data: any): PartialVoteState {\r\n        data = typeof data === 'object' ? data : {};\r\n        let result = new PartialVoteState();\r\n        result.init(data);\r\n        return result;\r\n    }\r\n\r\n    toJSON(data?: any) {\r\n        data = typeof data === 'object' ? data : {};\r\n        data[\"id\"] = this.id;\r\n        data[\"count\"] = this.count;\r\n        return data; \r\n    }\r\n}\r\n\r\nexport interface IPartialVoteState {\r\n    id?: number;\r\n    count?: number;\r\n}\r\n\r\nexport class ApiException extends Error {\r\n    message: string;\r\n    status: number;\r\n    response: string;\r\n    headers: { [key: string]: any; };\r\n    result: any;\r\n\r\n    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {\r\n        super();\r\n\r\n        this.message = message;\r\n        this.status = status;\r\n        this.response = response;\r\n        this.headers = headers;\r\n        this.result = result;\r\n    }\r\n\r\n    protected isApiException = true;\r\n\r\n    static isApiException(obj: any): obj is ApiException {\r\n        return obj.isApiException === true;\r\n    }\r\n}\r\n\r\nfunction throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {\r\n    if (result !== null && result !== undefined)\r\n        throw result;\r\n    else\r\n        throw new ApiException(message, status, response, headers, null);\r\n}","declare global {\r\n    interface Window {\r\n        settings: { webApiServer: string; useHTTPS: boolean };\r\n    }\r\n}\r\n\r\nwindow.settings = window.settings || {};\r\n\r\nexport const createApiUrl = () => {\r\n    let httpType: string = window.settings.useHTTPS ? \"https\" : \"http\";\r\n    return `${httpType}://${window.settings.webApiServer}`;\r\n};\r\n\r\nexport const apiUrl: string = `https://${window.settings.webApiServer}`;\r\nexport const hubUrl: string = `https://${window.settings.webApiServer}/votinghub`;\r\nexport const socketUrl: string = `wss://${window.settings.webApiServer}/Voting/RegisterVoterSocket`;\r\n","import { hubUrl } from \"./appConfig\";\r\nimport * as signalR from \"@microsoft/signalr\";\r\nimport { CompleteGameState, PartialGameState } from \"./ChaosApiClient\";\r\n\r\nexport module WebSocketManager {\r\n    let connection: signalR.HubConnection | undefined;\r\n\r\n    export function setupConnection(\r\n        newVoteOptions: (completeGameState: CompleteGameState) => any,\r\n        voteUpdate: (partialGameState: PartialGameState) => any,\r\n        roomCode: string\r\n    ) {\r\n        connection = new signalR.HubConnectionBuilder().withUrl(hubUrl).build();\r\n\r\n        connection.on(\"newVoteOptions\", newVoteOptions);\r\n        connection.on(\"voteUpdate\", voteUpdate);\r\n\r\n        connection\r\n            .start()\r\n            .then(async () => {\r\n                await registerAsVoter(roomCode);\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"Error when starting hub connection\");\r\n            });\r\n    }\r\n\r\n    export async function registerAsVoter(roomCode: string) {\r\n        await connection?.send(\"registerAsVoter\", roomCode);\r\n    }\r\n}\r\n","import { createSlice, Dispatch, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport {\r\n    CompleteGameState,\r\n    FullVoteOptionState,\r\n    PartialGameState,\r\n    PartialVoteState,\r\n} from \"../../ChaosApiClient\";\r\nimport { ChaosApiClient } from \"../../ChaosApiClient\";\r\nimport { apiUrl } from \"../../appConfig\";\r\n\r\nlet ChaosApi = new ChaosApiClient(apiUrl);\r\n\r\nexport interface RoomState {\r\n    gameState: GameState;\r\n}\r\n\r\nexport interface GameState {\r\n    previousResultDescription: string | undefined;\r\n    currentRound: number;\r\n    gameVotesState: GameVoteState[];\r\n}\r\n\r\nexport interface GameVoteState {\r\n    id: number;\r\n    count: number;\r\n    description: string;\r\n}\r\n\r\nexport interface VoteUpdate {\r\n    id: number | undefined;\r\n    count: number | undefined;\r\n}\r\n\r\nexport const initialState: RoomState = {\r\n    gameState: {\r\n        previousResultDescription: undefined,\r\n        currentRound: 0,\r\n        gameVotesState: [],\r\n    },\r\n};\r\n\r\nexport const roomSlice = createSlice({\r\n    name: \"room\",\r\n    initialState,\r\n    reducers: {\r\n        updateCompleteGameState: (state, action: PayloadAction<GameState>) => {\r\n            state.gameState.currentRound = action.payload.currentRound;\r\n            state.gameState.gameVotesState = action.payload.gameVotesState;\r\n            state.gameState.previousResultDescription =\r\n                action.payload.previousResultDescription;\r\n        },\r\n        updatePartialGameState: (\r\n            state,\r\n            action: PayloadAction<VoteUpdate[]>\r\n        ) => {\r\n            const newGameVoteState: GameVoteState[] = state.gameState.gameVotesState.map(\r\n                (gvs: GameVoteState) => {\r\n                    const matchingVoteUpdate:\r\n                        | VoteUpdate\r\n                        | undefined = action.payload.find((vu: VoteUpdate) => {\r\n                        return vu.id === gvs.id;\r\n                    });\r\n\r\n                    return {\r\n                        ...gvs,\r\n                        count: matchingVoteUpdate?.count ?? gvs.count,\r\n                    };\r\n                }\r\n            );\r\n\r\n            state.gameState.gameVotesState = newGameVoteState;\r\n        },\r\n    },\r\n});\r\n\r\nexport const updateCompleteGameStateFromSocketUpdate = (\r\n    completeGameState: CompleteGameState\r\n) => {\r\n    return async (dispatch: Dispatch) => {\r\n        const gameState: GameState = {\r\n            currentRound:\r\n                completeGameState.currentRound ??\r\n                initialState.gameState.currentRound,\r\n            previousResultDescription:\r\n                completeGameState.previousResultDescription ??\r\n                initialState.gameState.previousResultDescription,\r\n            gameVotesState:\r\n                completeGameState.voteOptionsState?.map(\r\n                    (vos: FullVoteOptionState): GameVoteState => {\r\n                        return {\r\n                            count: vos.count ?? 0,\r\n                            description: vos.description ?? \"\",\r\n                            id: vos.id ?? -1,\r\n                        };\r\n                    }\r\n                ) ?? initialState.gameState.gameVotesState,\r\n        };\r\n\r\n        return dispatch(roomSlice.actions.updateCompleteGameState(gameState));\r\n    };\r\n};\r\n\r\nexport const updatePartialGameStateFromSocketUpdate = (\r\n    partialGameState: PartialGameState\r\n) => {\r\n    return async (dispatch: Dispatch) => {\r\n        const voteUpdate:\r\n            | VoteUpdate[]\r\n            | undefined = partialGameState?.partialVoteStates?.map(\r\n            (pvs: PartialVoteState): VoteUpdate => {\r\n                return {\r\n                    count: pvs.count,\r\n                    id: pvs.id,\r\n                };\r\n            }\r\n        );\r\n\r\n        if (!voteUpdate) return;\r\n\r\n        return dispatch(roomSlice.actions.updatePartialGameState(voteUpdate));\r\n    };\r\n};\r\n\r\nexport const createGameVoteStatesFromApiModel = (\r\n    partialGameState: PartialGameState,\r\n    currentGameVoteStates: GameVoteState[]\r\n) => {\r\n    const newVoteStates: GameVoteState[] = [];\r\n\r\n    currentGameVoteStates.forEach((cgvs: GameVoteState) => {\r\n        const matchingPartialVoteState:\r\n            | PartialVoteState\r\n            | undefined = partialGameState.partialVoteStates!.find(\r\n            (pvs: PartialVoteState) => pvs.id === cgvs.id\r\n        );\r\n\r\n        if (matchingPartialVoteState) {\r\n            newVoteStates.push({\r\n                ...cgvs,\r\n                count: matchingPartialVoteState.count ?? 0,\r\n            });\r\n        } else {\r\n            newVoteStates.push({\r\n                ...cgvs,\r\n            });\r\n        }\r\n    });\r\n\r\n    return newVoteStates;\r\n};\r\n\r\nexport const loadInitialGameState = (roomCode: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        await ChaosApi.getCompleteGameState(roomCode)\r\n            .then((completeGameState: CompleteGameState) => {\r\n                return dispatch(\r\n                    roomSlice.actions.updateCompleteGameState({\r\n                        currentRound:\r\n                            completeGameState.currentRound ??\r\n                            initialState.gameState.currentRound,\r\n                        previousResultDescription:\r\n                            completeGameState.previousResultDescription ??\r\n                            initialState.gameState.previousResultDescription,\r\n                        gameVotesState:\r\n                            completeGameState.voteOptionsState?.map(\r\n                                (vos: FullVoteOptionState): GameVoteState => {\r\n                                    return {\r\n                                        count: vos.count ?? 0,\r\n                                        description: vos.description ?? \"\",\r\n                                        id: vos.id ?? -1,\r\n                                    };\r\n                                }\r\n                            ) ?? initialState.gameState.gameVotesState,\r\n                    })\r\n                );\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"error retrieving initial game state: \" + error);\r\n            });\r\n    };\r\n};\r\n\r\nexport const castVote = async (\r\n    roomCode: string,\r\n    round: number,\r\n    optionId: number\r\n) => {\r\n    try {\r\n        await ChaosApi.vote(roomCode, round, optionId);\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\n\r\nexport default roomSlice.reducer;\r\n","import { castVote } from \"./roomSlice\";\r\n\r\ninterface VoteButtonProps {\r\n    id: number;\r\n    count: number;\r\n    description: string;\r\n    round: number;\r\n    roomCode: string;\r\n}\r\n\r\nconst VoteButton = ({\r\n    id,\r\n    count,\r\n    description,\r\n    round,\r\n    roomCode,\r\n}: VoteButtonProps) => {\r\n    let btnColour = \"btn-primary\";\r\n\r\n    switch (id) {\r\n        case 0:\r\n            btnColour = \"btn-primary\";\r\n            break;\r\n        case 1:\r\n            btnColour = \"btn-success\";\r\n            break;\r\n        case 2:\r\n            btnColour = \"btn-danger\";\r\n            break;\r\n        case 3:\r\n            btnColour = \"btn-dark\";\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className=\"col d-grid gap-1\">\r\n            <button\r\n                className={`btn btn-lg ${btnColour}`}\r\n                onClick={async () => {\r\n                    await castVote(roomCode, round, id);\r\n                }}\r\n            >\r\n                <span>{description}</span>\r\n                <br />\r\n                <span>Votes: {count}</span>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VoteButton;\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    GameVoteState,\r\n    loadInitialGameState,\r\n    updateCompleteGameStateFromSocketUpdate,\r\n    updatePartialGameStateFromSocketUpdate,\r\n} from \"./roomSlice\";\r\nimport VoteButton from \"./VoteButton\";\r\nimport { CompleteGameState, PartialGameState } from \"../../ChaosApiClient\";\r\nimport { WebSocketManager } from \"../../WebSocketManager\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\ninterface RoomParams {\r\n    roomCode: string;\r\n}\r\n\r\nexport function Room() {\r\n    const { roomCode } = useParams<RoomParams>();\r\n\r\n    const currentRound = useSelector(\r\n        (state: RootState) => state.room.gameState.currentRound,\r\n        (left: number, right: number) => left === right\r\n    );\r\n\r\n    const gameVotesState: GameVoteState[] = useSelector(\r\n        (state: RootState) => state.room.gameState.gameVotesState,\r\n        (left: GameVoteState[], right: GameVoteState[]) => {\r\n            if (left !== right) return false;\r\n            if (left.length !== right.length) return false;\r\n\r\n            for (let i = 0; i < left.length; i++) {\r\n                if (left[i].count !== right[i].count) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n    );\r\n\r\n    const previousResultDescription = useSelector(\r\n        (state: RootState) => state.room.gameState.previousResultDescription,\r\n        (left: string | undefined, right: string | undefined) => left === right\r\n    );\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleNewVoteOptions = (completeGameState: CompleteGameState) => {\r\n        if (completeGameState == null) return;\r\n        dispatch(updateCompleteGameStateFromSocketUpdate(completeGameState));\r\n    };\r\n\r\n    const handleVoteUpdate = (partialGameState: PartialGameState) => {\r\n        if (partialGameState == null) return;\r\n        dispatch(updatePartialGameStateFromSocketUpdate(partialGameState));\r\n    };\r\n\r\n    useEffect(() => {\r\n        WebSocketManager.setupConnection(\r\n            handleNewVoteOptions,\r\n            handleVoteUpdate,\r\n            roomCode\r\n        );\r\n\r\n        dispatch(loadInitialGameState(roomCode));\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {previousResultDescription && (\r\n                <p className=\"lead text-center\">\r\n                    Previous vote: {previousResultDescription}\r\n                </p>\r\n            )}\r\n\r\n            {(!gameVotesState || gameVotesState.length === 0) && (\r\n                <p className=\"lead text-center\">\r\n                    Waiting for initial voting options\r\n                </p>\r\n            )}\r\n\r\n            {gameVotesState && gameVotesState.length > 0 && (\r\n                <>\r\n                    <hr />\r\n                    <div className=\"container\">\r\n                        <div className=\"row row-cols-2 gy-2\">\r\n                            {gameVotesState.map(\r\n                                (gameVoteState: GameVoteState) => {\r\n                                    return (\r\n                                        <VoteButton\r\n                                            key={gameVoteState.id}\r\n                                            count={gameVoteState.count}\r\n                                            description={\r\n                                                gameVoteState.description\r\n                                            }\r\n                                            round={currentRound}\r\n                                            id={gameVoteState.id}\r\n                                            roomCode={roomCode}\r\n                                        />\r\n                                    );\r\n                                }\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","import { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport function Lobby() {\r\n    const history = useHistory();\r\n\r\n    const [roomCode, setRoomCode] = useState(\"\");\r\n\r\n    const goToRoom = () => {\r\n        history.push(`/room/${roomCode}`);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <div className=\"input-group input-group-lg\">\r\n                <span className=\"input-group-text\" id=\"inputGroup-sizing-lg\">\r\n                    Enter Room Code\r\n                </span>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    aria-label=\"Enter Room Code\"\r\n                    aria-describedby=\"enterRoomCode\"\r\n                    value={roomCode}\r\n                    onChange={(evt) => {\r\n                        setRoomCode(evt.target.value);\r\n                    }}\r\n                />\r\n                <button className=\"btn btn-outline-primary\" type=\"button\" onClick={goToRoom}>\r\n                    Begin Torture\r\n                </button>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport { Room } from \"./features/room/Room\";\r\nimport { Lobby } from \"./features/room/Lobby\";\r\n\r\nfunction App() {\r\n    const [friendText] = useState(() => {\r\n        const friendValues: string[] = [\r\n            \"mates\",\r\n            \"friends\",\r\n            \"cunts\",\r\n            \"buddies\",\r\n            \"dudes\",\r\n            \"bastards\",\r\n            \"mean people\",\r\n            \"uncouth individuals\",\r\n            \"meanies\",\r\n            \"acquaintances\",\r\n            \"associates\",\r\n            \"allies\",\r\n            \"colleagues\",\r\n            \"fuck knuckles\",\r\n            \"organ donors\",\r\n            \"meat sacks\",\r\n            \"meat popsicles\",\r\n            \"stoners\",\r\n        ];\r\n\r\n        return friendValues[Math.floor(Math.random() * friendValues.length)];\r\n    });\r\n\r\n    return (\r\n        <Router>\r\n            <nav className=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\">\r\n                <div className=\"container\">\r\n                    <Link to=\"/\" className=\"navbar-brand\">\r\n                        To Lobby\r\n                    </Link>\r\n                </div>\r\n            </nav>\r\n\r\n            <div className=\"container\">\r\n                <h1 className=\"text-center\">\r\n                    GTA V Torture Tool{\" \"}\r\n                    <small className=\"text-muted\">\r\n                        for use with '{friendText}'\r\n                    </small>\r\n                </h1>\r\n\r\n                <Switch>\r\n                    <Route path=\"/room/:roomCode\">\r\n                        <Room />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <Lobby />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport roomReducer from '../features/room/roomSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    room: roomReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}