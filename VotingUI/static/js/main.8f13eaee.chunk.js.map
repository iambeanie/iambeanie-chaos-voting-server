{"version":3,"sources":["ChaosApiClient.ts","appConfig.ts","features/voter/voterSlice.ts","features/voter/VoteButton.tsx","features/voter/Voter.tsx","WebSocketManager.ts","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["ChaosApiClient","baseUrl","http","jsonParseReviver","undefined","this","window","url_","replace","fetch","method","headers","then","_response","processGetCurrentVoteState","response","status","_headers","forEach","v","k","text","_responseText","resultData200","JSON","parse","VoteOptionStateModel","fromJS","throwException","Promise","resolve","voteOptionId","encodeURIComponent","processVote","body","options_","stringify","processSetNewVoteOptions","processWs","processWs2","VoteOptionModel","data","optionId","optionDescription","optionVotes","property","hasOwnProperty","_data","result","init","previousVotingResult","voteOptionsState","Array","isArray","item","push","toJSON","ApiException","message","isApiException","obj","Error","settings","apiUrl","webApiServer","socketUrl","Api","initialState","voteOptionState","voterSlice","createSlice","name","reducers","updateVote","state","action","payload","actions","selectVoteOptionState","voter","VoteButton","voteOption","dispatch","useDispatch","className","onClick","a","vote","console","log","WSM","Socket","addHandler","handler","onmessage","WebSocket","Voter","useSelector","handleIncomingMessage","ev","useEffect","getCurrentVoteState","role","map","App","store","configureStore","reducer","voterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.8f13eaee.chunk.js","sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\n//----------------------\r\n// <auto-generated>\r\n//     Generated using the NSwag toolchain v13.10.7.0 (NJsonSchema v10.3.9.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)\r\n// </auto-generated>\r\n//----------------------\r\n// ReSharper disable InconsistentNaming\r\n\r\nexport class ChaosApiClient {\r\n    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };\r\n    private baseUrl: string;\r\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\r\n\r\n    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {\r\n        this.http = http ? http : <any>window;\r\n        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : \"\";\r\n    }\r\n\r\n    /**\r\n     * @return Success\r\n     */\r\n    getCurrentVoteState(): Promise<VoteOptionStateModel> {\r\n        let url_ = this.baseUrl + \"/Chaos/GetCurrentVoteState\";\r\n        url_ = url_.replace(/[?&]$/, \"\");\r\n\r\n        let options_ = <RequestInit>{\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Accept\": \"text/plain\"\r\n            }\r\n        };\r\n\r\n        return this.http.fetch(url_, options_).then((_response: Response) => {\r\n            return this.processGetCurrentVoteState(_response);\r\n        });\r\n    }\r\n\r\n    protected processGetCurrentVoteState(response: Response): Promise<VoteOptionStateModel> {\r\n        const status = response.status;\r\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\r\n        if (status === 200) {\r\n            return response.text().then((_responseText) => {\r\n            let result200: any = null;\r\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\r\n            result200 = VoteOptionStateModel.fromJS(resultData200);\r\n            return result200;\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\r\n            });\r\n        }\r\n        return Promise.resolve<VoteOptionStateModel>(<any>null);\r\n    }\r\n\r\n    /**\r\n     * @param voteOptionId (optional) \r\n     * @return Success\r\n     */\r\n    vote(voteOptionId: string | null | undefined): Promise<void> {\r\n        let url_ = this.baseUrl + \"/Chaos/Vote?\";\r\n        if (voteOptionId !== undefined && voteOptionId !== null)\r\n            url_ += \"voteOptionId=\" + encodeURIComponent(\"\" + voteOptionId) + \"&\";\r\n        url_ = url_.replace(/[?&]$/, \"\");\r\n\r\n        let options_ = <RequestInit>{\r\n            method: \"POST\",\r\n            headers: {\r\n            }\r\n        };\r\n\r\n        return this.http.fetch(url_, options_).then((_response: Response) => {\r\n            return this.processVote(_response);\r\n        });\r\n    }\r\n\r\n    protected processVote(response: Response): Promise<void> {\r\n        const status = response.status;\r\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\r\n        if (status === 200) {\r\n            return response.text().then((_responseText) => {\r\n            return;\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\r\n            });\r\n        }\r\n        return Promise.resolve<void>(<any>null);\r\n    }\r\n\r\n    /**\r\n     * @param body (optional) \r\n     * @return Success\r\n     */\r\n    setNewVoteOptions(body: VoteOption[] | null | undefined): Promise<void> {\r\n        let url_ = this.baseUrl + \"/Chaos/SetNewVoteOptions\";\r\n        url_ = url_.replace(/[?&]$/, \"\");\r\n\r\n        const content_ = JSON.stringify(body);\r\n\r\n        let options_ = <RequestInit>{\r\n            body: content_,\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            }\r\n        };\r\n\r\n        return this.http.fetch(url_, options_).then((_response: Response) => {\r\n            return this.processSetNewVoteOptions(_response);\r\n        });\r\n    }\r\n\r\n    protected processSetNewVoteOptions(response: Response): Promise<void> {\r\n        const status = response.status;\r\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\r\n        if (status === 200) {\r\n            return response.text().then((_responseText) => {\r\n            return;\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\r\n            });\r\n        }\r\n        return Promise.resolve<void>(<any>null);\r\n    }\r\n\r\n    /**\r\n     * @return Success\r\n     */\r\n    ws(): Promise<void> {\r\n        let url_ = this.baseUrl + \"/ws\";\r\n        url_ = url_.replace(/[?&]$/, \"\");\r\n\r\n        let options_ = <RequestInit>{\r\n            method: \"GET\",\r\n            headers: {\r\n            }\r\n        };\r\n\r\n        return this.http.fetch(url_, options_).then((_response: Response) => {\r\n            return this.processWs(_response);\r\n        });\r\n    }\r\n\r\n    protected processWs(response: Response): Promise<void> {\r\n        const status = response.status;\r\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\r\n        if (status === 200) {\r\n            return response.text().then((_responseText) => {\r\n            return;\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\r\n            });\r\n        }\r\n        return Promise.resolve<void>(<any>null);\r\n    }\r\n\r\n    /**\r\n     * @return Success\r\n     */\r\n    ws2(): Promise<void> {\r\n        let url_ = this.baseUrl + \"/host/ws\";\r\n        url_ = url_.replace(/[?&]$/, \"\");\r\n\r\n        let options_ = <RequestInit>{\r\n            method: \"GET\",\r\n            headers: {\r\n            }\r\n        };\r\n\r\n        return this.http.fetch(url_, options_).then((_response: Response) => {\r\n            return this.processWs2(_response);\r\n        });\r\n    }\r\n\r\n    protected processWs2(response: Response): Promise<void> {\r\n        const status = response.status;\r\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\r\n        if (status === 200) {\r\n            return response.text().then((_responseText) => {\r\n            return;\r\n            });\r\n        } else if (status !== 200 && status !== 204) {\r\n            return response.text().then((_responseText) => {\r\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\r\n            });\r\n        }\r\n        return Promise.resolve<void>(<any>null);\r\n    }\r\n}\r\n\r\nexport class VoteOptionModel implements IVoteOptionModel {\r\n    optionId?: string | undefined;\r\n    optionDescription?: string | undefined;\r\n    optionVotes?: number;\r\n\r\n    constructor(data?: IVoteOptionModel) {\r\n        if (data) {\r\n            for (var property in data) {\r\n                if (data.hasOwnProperty(property))\r\n                    (<any>this)[property] = (<any>data)[property];\r\n            }\r\n        }\r\n    }\r\n\r\n    init(_data?: any) {\r\n        if (_data) {\r\n            this.optionId = _data[\"optionId\"];\r\n            this.optionDescription = _data[\"optionDescription\"];\r\n            this.optionVotes = _data[\"optionVotes\"];\r\n        }\r\n    }\r\n\r\n    static fromJS(data: any): VoteOptionModel {\r\n        data = typeof data === 'object' ? data : {};\r\n        let result = new VoteOptionModel();\r\n        result.init(data);\r\n        return result;\r\n    }\r\n\r\n    toJSON(data?: any) {\r\n        data = typeof data === 'object' ? data : {};\r\n        data[\"optionId\"] = this.optionId;\r\n        data[\"optionDescription\"] = this.optionDescription;\r\n        data[\"optionVotes\"] = this.optionVotes;\r\n        return data; \r\n    }\r\n}\r\n\r\nexport interface IVoteOptionModel {\r\n    optionId?: string | undefined;\r\n    optionDescription?: string | undefined;\r\n    optionVotes?: number;\r\n}\r\n\r\nexport class VoteOptionStateModel implements IVoteOptionStateModel {\r\n    previousVotingResult?: string | undefined;\r\n    voteOptionsState?: VoteOptionModel[] | undefined;\r\n\r\n    constructor(data?: IVoteOptionStateModel) {\r\n        if (data) {\r\n            for (var property in data) {\r\n                if (data.hasOwnProperty(property))\r\n                    (<any>this)[property] = (<any>data)[property];\r\n            }\r\n        }\r\n    }\r\n\r\n    init(_data?: any) {\r\n        if (_data) {\r\n            this.previousVotingResult = _data[\"previousVotingResult\"];\r\n            if (Array.isArray(_data[\"voteOptionsState\"])) {\r\n                this.voteOptionsState = [] as any;\r\n                for (let item of _data[\"voteOptionsState\"])\r\n                    this.voteOptionsState!.push(VoteOptionModel.fromJS(item));\r\n            }\r\n        }\r\n    }\r\n\r\n    static fromJS(data: any): VoteOptionStateModel {\r\n        data = typeof data === 'object' ? data : {};\r\n        let result = new VoteOptionStateModel();\r\n        result.init(data);\r\n        return result;\r\n    }\r\n\r\n    toJSON(data?: any) {\r\n        data = typeof data === 'object' ? data : {};\r\n        data[\"previousVotingResult\"] = this.previousVotingResult;\r\n        if (Array.isArray(this.voteOptionsState)) {\r\n            data[\"voteOptionsState\"] = [];\r\n            for (let item of this.voteOptionsState)\r\n                data[\"voteOptionsState\"].push(item.toJSON());\r\n        }\r\n        return data; \r\n    }\r\n}\r\n\r\nexport interface IVoteOptionStateModel {\r\n    previousVotingResult?: string | undefined;\r\n    voteOptionsState?: VoteOptionModel[] | undefined;\r\n}\r\n\r\nexport class VoteOption implements IVoteOption {\r\n    optionId?: string | undefined;\r\n    optionDescription?: string | undefined;\r\n\r\n    constructor(data?: IVoteOption) {\r\n        if (data) {\r\n            for (var property in data) {\r\n                if (data.hasOwnProperty(property))\r\n                    (<any>this)[property] = (<any>data)[property];\r\n            }\r\n        }\r\n    }\r\n\r\n    init(_data?: any) {\r\n        if (_data) {\r\n            this.optionId = _data[\"optionId\"];\r\n            this.optionDescription = _data[\"optionDescription\"];\r\n        }\r\n    }\r\n\r\n    static fromJS(data: any): VoteOption {\r\n        data = typeof data === 'object' ? data : {};\r\n        let result = new VoteOption();\r\n        result.init(data);\r\n        return result;\r\n    }\r\n\r\n    toJSON(data?: any) {\r\n        data = typeof data === 'object' ? data : {};\r\n        data[\"optionId\"] = this.optionId;\r\n        data[\"optionDescription\"] = this.optionDescription;\r\n        return data; \r\n    }\r\n}\r\n\r\nexport interface IVoteOption {\r\n    optionId?: string | undefined;\r\n    optionDescription?: string | undefined;\r\n}\r\n\r\nexport class ApiException extends Error {\r\n    message: string;\r\n    status: number;\r\n    response: string;\r\n    headers: { [key: string]: any; };\r\n    result: any;\r\n\r\n    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {\r\n        super();\r\n\r\n        this.message = message;\r\n        this.status = status;\r\n        this.response = response;\r\n        this.headers = headers;\r\n        this.result = result;\r\n    }\r\n\r\n    protected isApiException = true;\r\n\r\n    static isApiException(obj: any): obj is ApiException {\r\n        return obj.isApiException === true;\r\n    }\r\n}\r\n\r\nfunction throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {\r\n    if (result !== null && result !== undefined)\r\n        throw result;\r\n    else\r\n        throw new ApiException(message, status, response, headers, null);\r\n}","declare global {\r\n    interface Window {\r\n        settings: { webApiServer: string };\r\n    }\r\n}\r\n\r\nwindow.settings = window.settings || {};\r\n\r\nexport const apiUrl: string = `https://${window.settings.webApiServer}`;\r\nexport const socketUrl: string = `wss://${window.settings.webApiServer}/ws`;","import { createSlice, Dispatch, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../app/store\";\r\nimport { ChaosApiClient, VoteOptionStateModel } from \"../../ChaosApiClient\";\r\nimport { apiUrl } from \"../../appConfig\";\r\n\r\nlet Api = new ChaosApiClient(apiUrl);\r\n\r\ninterface VoterState {\r\n    voteOptionState: VoteOptionStateModel;\r\n}\r\n\r\nexport const initialState: VoterState = {\r\n    voteOptionState: new VoteOptionStateModel({\r\n        previousVotingResult: \"\",\r\n        voteOptionsState: [],\r\n    })\r\n};\r\n\r\nexport const voterSlice = createSlice({\r\n    name: \"voter\",\r\n    initialState,\r\n    reducers: {\r\n        updateVote: (state, action: PayloadAction<VoteOptionStateModel>) => {\r\n            state.voteOptionState = action.payload;\r\n        }\r\n    },\r\n});\r\n\r\nexport const { updateVote } = voterSlice.actions;\r\n\r\nexport const loadVoteState = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        try {\r\n            await Api.getCurrentVoteState().then((result) => {\r\n                return dispatch(updateVote(result));\r\n            });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n};\r\n\r\nexport const vote = (optionId: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        try {\r\n            await Api.vote(optionId);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n};\r\n\r\nexport const selectVoteOptionState = (state: RootState) =>\r\n    state.voter.voteOptionState;\r\n\r\nexport default voterSlice.reducer;\r\n","import { VoteOptionModel } from \"../../ChaosApiClient\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { vote } from \"./voterSlice\";\r\n\r\ninterface VoteButtonProps {\r\n    voteOption: VoteOptionModel;\r\n}\r\n\r\nconst VoteButton = ({ voteOption }: VoteButtonProps) => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"col d-grid gap-1\" key={voteOption.optionId!}>\r\n            <button\r\n                className=\"btn btn-primary\"\r\n                onClick={() => {\r\n                    dispatch(vote(voteOption.optionId!));\r\n                }}\r\n            >\r\n                <span>{voteOption.optionDescription}</span>\r\n                <br />\r\n                <span>Votes: {voteOption.optionVotes}</span>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VoteButton;","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectVoteOptionState, updateVote, loadVoteState } from \"./voterSlice\";\r\nimport { WebSocketManager } from \"../../WebSocketManager\";\r\nimport { VoteOptionStateModel } from \"../../ChaosApiClient\";\r\nimport VoteButton from \"./VoteButton\";\r\n\r\nconst WSM = new WebSocketManager();\r\n\r\nexport function Voter() {\r\n    const voteOptionState = useSelector(selectVoteOptionState);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleIncomingMessage = (ev: MessageEvent) => {\r\n        let data = VoteOptionStateModel.fromJS(JSON.parse(ev.data));\r\n        dispatch(updateVote(data));\r\n    };\r\n\r\n    useEffect(() => {\r\n        WSM.addHandler(handleIncomingMessage);\r\n        dispatch(loadVoteState());\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"text-center\">\r\n                GTA V Torture Tool{\" \"}\r\n                <small className=\"text-muted\">for use with 'friends'</small>\r\n            </h1>\r\n            <p className=\"lead text-center\">\r\n                Previous vote: {voteOptionState.previousVotingResult}\r\n            </p>\r\n\r\n            {!voteOptionState.voteOptionsState && (\r\n                <div className=\"spinner-border\" role=\"status\">\r\n                    <span className=\"visually-hidden\">Loading...</span>\r\n                </div>\r\n            )}\r\n\r\n            {voteOptionState.voteOptionsState && (\r\n                <div className=\"container\">\r\n                    <div className=\"row row-cols-2 gy-2\">\r\n                        {voteOptionState.voteOptionsState.map((voteOption) => {\r\n                            return <VoteButton voteOption={voteOption} />;\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import { socketUrl } from \"./appConfig\";\r\n\r\n\r\nexport class WebSocketManager {\r\n    Socket: WebSocket;\r\n\r\n    constructor() {\r\n        this.Socket = new WebSocket(socketUrl);\r\n    }\r\n\r\n    addHandler = (handler: (ev: MessageEvent) => any) => {\r\n        this.Socket.onmessage = handler;\r\n    }\r\n};","import \"./App.css\";\r\nimport { Voter } from \"./features/voter/Voter\";\r\n\r\n\r\nfunction App() {\r\n    return <Voter />;\r\n}\r\n\r\nexport default App;","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport voterReducer from '../features/voter/voterSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    voter: voterReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}